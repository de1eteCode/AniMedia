//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using AniMedia.Domain.Models.Dtos;
using AniMedia.Domain.Models.Responses;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace AniMedia.WebClient.Common.ApiServices
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IApiClient
    {
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProfileUserDto> ApiV1AccountProfileAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProfileUserDto> ApiV1AccountProfileAsync(System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProfileUserDto> ApiV1AccountUpdateAsync(string firstName, string secondName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProfileUserDto> ApiV1AccountUpdateAsync(string firstName, string secondName, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BinaryFileDto> ApiV1AccountUpdateavatarAsync(FileParameter newAvatar);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BinaryFileDto> ApiV1AccountUpdateavatarAsync(FileParameter newAvatar, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PagedResult<AnimeSeriesDto>> ApiV1AnimeSeriesGetAsync(int? page, int? pageSize);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PagedResult<AnimeSeriesDto>> ApiV1AnimeSeriesGetAsync(int? page, int? pageSize, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AnimeSeriesDto> ApiV1AnimeSeriesPostAsync(AnimeSeriesDto dto);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AnimeSeriesDto> ApiV1AnimeSeriesPostAsync(AnimeSeriesDto dto, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AnimeSeriesDto> ApiV1AnimeSeriesGetAsync(System.Guid? uidQuery, string uidPath);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AnimeSeriesDto> ApiV1AnimeSeriesGetAsync(System.Guid? uidQuery, string uidPath, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AnimeSeriesDto> ApiV1AnimeSeriesPostAsync(System.Guid? uidQuery, string uidPath, AnimeSeriesDto dto);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AnimeSeriesDto> ApiV1AnimeSeriesPostAsync(System.Guid? uidQuery, string uidPath, AnimeSeriesDto dto, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RateAnimeSeriesDto> ApiV1AnimeSeriesRateAsync(System.Guid? uidAnimeSeriesQuery, string uidAnimeSeriesPath, byte rate);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RateAnimeSeriesDto> ApiV1AnimeSeriesRateAsync(System.Guid? uidAnimeSeriesQuery, string uidAnimeSeriesPath, byte rate, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationResponse> AuthAuthorizationAsync(string token);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationResponse> AuthAuthorizationAsync(string token, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationResponse> AuthRefreshAsync(System.Guid refreshToken);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationResponse> AuthRefreshAsync(System.Guid refreshToken, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationResponse> AuthRegistrationAsync(string nickname, string password);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationResponse> AuthRegistrationAsync(string nickname, string password, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationResponse> AuthLoginAsync(string nickname, string password);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthorizationResponse> AuthLoginAsync(string nickname, string password, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GenreDto> ApiV1GenreGetAsync(int? page, int? pageSize);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GenreDto> ApiV1GenreGetAsync(int? page, int? pageSize, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GenreDto> ApiV1GenrePostAsync(string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GenreDto> ApiV1GenrePostAsync(string name, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GenreDto> ApiV1GenrePutAsync(System.Guid? uidQuery, string uidPath, string name);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GenreDto> ApiV1GenrePutAsync(System.Guid? uidQuery, string uidPath, string name, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BinaryFileDto> ApiV1MediaInfoAsync(string uidOrName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BinaryFileDto> ApiV1MediaInfoAsync(string uidOrName, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ApiV1MediaFileAsync(string uidOrName);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> ApiV1MediaFileAsync(string uidOrName, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BinaryFileDto> ApiV1MediaLoadAsync(FileParameter file);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BinaryFileDto> ApiV1MediaLoadAsync(FileParameter file, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SessionDto> ApiV1SessionRemoveAsync(System.Guid sessionUid);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SessionDto> ApiV1SessionRemoveAsync(System.Guid sessionUid, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PagedResult<SessionDto>> ApiV1SessionListAsync(int? page, int? pageSize);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PagedResult<SessionDto>> ApiV1SessionListAsync(int? page, int? pageSize, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SessionDto> ApiV1SessionAsync(string accessToken);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiClientException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SessionDto> ApiV1SessionAsync(string accessToken, System.Threading.CancellationToken cancellationToken);

    }

    

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiClientException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiClientException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiClientException<TResult> : ApiClientException
    {
        public TResult Result { get; private set; }

        public ApiClientException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603
